<?php

namespace CountryEnums;

use CountryEnums\Exceptions\EnumNotFoundException;
use CountryEnums\Exceptions\LaravelNotFoundException;
use Illuminate\Support\Collection;
use Illuminate\Validation\Rules\Enum;
use Illuminate\Validation\Rules\In;
use ValueError;

enum Country: string
{
    case PLACEHOLDER_SHORT = 'PLACEHOLDER_SHORT'; // PLACEHOLDER_LABEL

    /**
     * Get all the regions that belong to this country
     *
     * @return array<Region>
     */
    public function regions(): array
    {
        return array_values(
            array_filter(
                Region::cases(),
                fn(Region $region) => ($this->value === $region->countryCode()),
            )
        );
    }

    /**
     * Cast this Country to array format
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'label' => $this->label(),
            'value' => $this->value,
            'regions' => array_map(fn(Region $region) => $region->toArray(), $this->regions()),
            'code' => $this->code(),
        ];
    }

    /**
     * Get a random Country
     *
     * @return Country
     */
    public static function random(): Country
    {
        $cases = static::cases();

        return $cases[mt_rand(0, count($cases) - 1)];
    }

    /**
     * Get all available country codes
     *
     * @return array
     */
    public static function getValues(): array
    {
        return array_map(fn(Country $country) => $country->value, static::cases());
    }

    /**
     * Get all available region codes for the given country
     *
     * @return array
     */
    public function getRegionValues(): array
    {
        return array_map(fn(Region $region) => $region->value, $this->regions());
    }

    /**
     * Get all options in key-value (code => label) pairs
     *
     * @return array
     */
    public static function getOptions(): array
    {
        $options = [];

        foreach (static::cases() as $country) {
            $options[$country->value] = $country->label();
        }

        return $options;
    }

    /**
     * Get the path to the SVG flag for the country if it exists
     *
     * @return string|null
     */
    public function svgFlag(): string
    {
        $path = sprintf(__DIR__ . '/../flags/svg/%s.svg', strtolower($this->value));

        return ($path = realpath($path)) ? $path : null;
    }

    /**
     * Get the contents of the SVG (the XML)
     *
     * @return string|null
     */
    public function svgFlagContents(): ?string
    {
        return ($svg = $this->svgFlag()) ? file_get_contents($svg) : null;
    }

    /**
     * Get the path to the PNG flag for this country if it exists
     *
     * @param integer $width
     * @return string|null
     */
    public function pngFlag(int $width = 100): ?string
    {
        if ($width > 250) {
            $width = 1000;
        } else if ($width > 100) {
            $width = 250;
        } else {
            $width = 100;
        }

        $path = sprintf(__DIR__ . '/../flags/png%dpx/%s.png', $width, strtolower($this->value));

        return ($path = realpath($path)) ? $path : null;
    }

    /**
     * Get the contents of the PNG
     *
     * @return string|null
     */
    public function pngFlagContents(int $width = 100): ?string
    {
        return ($svg = $this->pngFlag($width)) ? file_get_contents($svg) : null;
    }

    /**
     * Convert the given code to a Country, or throw an exception
     *
     * @param string $code
     * @return Country
     * @throws EnumNotFoundException
     */
    public static function fromCode(string $code): Country
    {
        foreach (static::cases() as $country) {
            if ($country->code() === $code) {
                return $country;
            }
        }

        throw EnumNotFoundException::codeNotFound($code, 'Country');
    }

    /**
     * Try to convert the given code to a Country, null if not valid
     *
     * @param string $code
     * @return Country|null
     */
    public static function tryFromCode(string $code): ?Country
    {
        try {
            return static::fromCode($code);
        } catch (EnumNotFoundException $e) {
            return null;
        }
    }

    /**
     * Get all country enums in an Illuminate\Support\Collection
     *
     * @requires Laravel
     * @return \Ilumminate\Support\Collection<Country>
     */
    public static function collect()
    {
        if (!class_exists(Collection::class)) {
            throw LaravelNotFoundException::classMissing(Collection::class);
        }

        return Collection::make(static::cases());
    }

    /**
     * Get the validation for this enum
     *
     * @return \Illuminate\Validation\Rules\Enum
     */
    public static function enumRule()
    {
        if (!class_exists(Enum::class)) {
            throw LaravelNotFoundException::classMissing(Enum::class);
        }

        return new Enum(static::class);
    }

    /**
     * Get the validation for the enum's values
     *
     * @return \Illuminate\Validation\Rules\In
     */
    public static function inRule()
    {
        if (!class_exists(In::class)) {
            throw LaravelNotFoundException::classMissing(In::class);
        }

        return new In(static::getValues());
    }

    /**
     * Parse the given country to a Country enum instance, or throw an exception it doesn't exist
     *
     * @param string|Country|null $value
     * @return Country
     * @throws EnumNotFoundException
     */
    public static function parse(string|Country|null $value): Country
    {
        if ($value === null) {
            throw EnumNotFoundException::valueNotFound($value, 'Country');
        }

        if ($value instanceof Country) {
            return $value;
        }

        try {
            return static::from($value);
        } catch (ValueError $e) {
            throw EnumNotFoundException::valueNotFound($value, 'Country');
        }
    }

    /**
     * Try to parse the given country value to a Country enum instance of null if it doesn't exist
     *
     * @param string|Country|null $value
     * @return Country|null
     */
    public static function tryParse(string|Country|null $value): ?Country
    {
        try {
            return static::parse($value);
        } catch (EnumNotFoundException $e) {
            return null;
        }
    }

    /**
     * Convert this to JSON
     *
     * @param int $options Flags for json_encode, e.g. JSON_PRETTY_PRINT
     * @return string
     */
    public function toJson($options = 0): string
    {
        return json_encode($this->toArray(), $options);
    }

    /**
     * Get the human-readable label of this country
     *
     * @return string
     */
    public function label(): string
    {
        return match ($this) {
            static::PLACEHOLDER_SHORT => "PLACEHOLDER_LABEL",
        };
    }

    /**
     * Get the code (English-version snake_case) for this Country
     *
     * @return string
     */
    public function code(): string
    {
        return match ($this) {
            static::PLACEHOLDER_SHORT => "PLACEHOLDER_CODE",
        };
    }
}