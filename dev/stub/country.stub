<?php

namespace Tilley\CountryEnums;

enum Country: string
{
    case {SHORT} = '{SHORT}'; // {LABEL}

    /**
     * Get all the regions that belong to this country
     *
     * @return array<Region>
     */
    public function regions(): array
    {
        return array_values(
            array_filter(
                Region::cases(),
                fn(Region $region) => ($this->value === $region->countryCode()),
            )
        );
    }

    /**
     * Cast this Country to array format
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'label' => $this->label(),
            'value' => $this->value,
            'regions' => array_map(fn(Region $region) => $region->toArray(), $this->regions()),
            'sort' => $this->sortKey(),
        ];
    }

    /**
     * Get a random Country
     *
     * @return Country
     */
    public static function random(): Country
    {
        $cases = Country::cases();

        return $cases[mt_rand(0, count($cases) - 1)];
    }

    /**
     * Get the human-readable label of this country
     *
     * @return string
     */
    public function label(): string
    {
        return match ($this) {
            static::{SHORT} => "{LABEL}",
        };
    }

    /**
     * Get the sort key (English-version snake_case) for this Country
     *
     * @return string
     */
    public function sortKey(): string
    {
        return match ($this) {
            static::{SHORT} => "{SORTKEY}",
        };
    }

    /**
     * Get all available country codes
     *
     * @return array
     */
    public static function getValues(): array
    {
        return array_map(fn(Country $country) => $country->value, Country::cases());
    }

    /**
     * Get all available region codes for the given country
     *
     * @return array
     */
    public function getRegionValues(): array
    {
        return array_map(fn(Region $region) => $region->value, $this->regions());
    }

    /**
     * Get all options in key-value (code => label) pairs
     *
     * @return array
     */
    public static function getOptions(): array
    {
        $options = [];

        foreach (Country::cases() as $country) {
            $options[$country->value] = $country->label();
        }

        return $options;
    }
}