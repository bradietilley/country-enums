<?php

namespace CountryEnums;

use CountryEnums\Exceptions\EnumNotFoundException;
use CountryEnums\Exceptions\LaravelNotFoundException;
use Illuminate\Support\Collection;
use Illuminate\Validation\Rules\Enum;
use Illuminate\Validation\Rules\In;
use ValueError;

enum Region: string
{
    case PLACEHOLDER_SHORT/*PAD*/ = 'PLACEHOLDER_SHORT';/*PAD*/ // PLACEHOLDER_COUNTRY > PLACEHOLDER_LABEL

    /**
     * Get the country that this region belongs to
     *
     * @return Country
     */
    public function country(): Country
    {
        return Country::from($this->countryCode());
    }

    /**
     * Cast this Region to array format
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'label' => $this->label(),
            'value' => $this->value,
            'region' => $this->regionCode(),
            'country' => $this->countryCode(),
            'code' => $this->code(),
        ];
    }

    /**
     * Get the region code
     *
     * @return string
     */
    public function regionCode(): string
    {
        return substr($this->value, 3);
    }

    /**
     * Get the country code
     *
     * @return string
     */
    public function countryCode(): string
    {
        return substr($this->value, 0, 2);
    }

    /**
     * Get regions in the given country.
     *
     * @param string|Country $country
     * @return array<Region>
     */
    public static function for(string|Country $country): array
    {
        $country = ($country instanceof Country) ? $country : Country::from($country);
        
        return $country->regions();
    }

    /**
     * Get the regions in the given country as a collection
     *
     * @requires Laravel
     * @param string|Country $country
     * @return Collection
     */
    public static function collectFor(string|Country $country): Collection
    {
        if (!class_exists(Collection::class)) {
            throw LaravelNotFoundException::classMissing(Collection::class);
        }

        return Collection::make(static::for($country));
    }

    /**
     * Get a random Region
     *
     * @return Region
     */
    public static function random(string|Country $country = null): Region
    {
        $cases = ($country !== null) ? static::for($country) : static::cases();

        return $cases[mt_rand(0, count($cases) - 1)];
    }

    /**
     * Get all available region codes (optionally scoped by country)
     *
     * @param string|Country|null $country
     * @return array
     */
    public static function getValues(string|Country $country = null): array
    {
        if ($country !== null) {
            $country = ($country instanceof Country) ? $country : Country::from($country);

            return $country->getRegionValues();
        }

        return array_map(fn(Region $region) => $region->value, static::cases());
    }

    /**
     * Get all available region codes (optionally scoped by country) as a collection
     *
     * @requires Laravel
     * @param string|Country|null $country
     * @return Collection
     */
    public static function collectValues(string|Country $country = null): Collection
    {
        if (!class_exists(Collection::class)) {
            throw LaravelNotFoundException::classMissing(Collection::class);
        }

        return Collection::make(static::getValues($country));
    }

    /**
     * Get all options in key-value (code => label) pairs
     *
     * @return array
     */
    public static function getOptions(string|Country $country = null): array
    {
        $options = [];
        
        if ($country !== null) {
            $country = ($country instanceof Country) ? $country : Country::from($country);

            $cases = $country->regions();
        } else {
            $cases = static::cases();
        } 

        foreach ($cases as $region) {
            $options[$region->value] = $region->label();
        }

        return $options;
    }

    /**
     * Get all available region codes (optionally scoped by country) as a collection
     *
     * @requires Laravel
     * @param string|Country|null $country
     * @return Collection
     */
    public static function collectOptions(string|Country $country = null): Collection
    {
        if (!class_exists(Collection::class)) {
            throw LaravelNotFoundException::classMissing(Collection::class);
        }

        return Collection::make(static::getOptions($country));
    }

    /**
     * Convert the given code to a Region, or throw an exception
     *
     * @param string $code
     * @return Region
     * @throws EnumNotFoundException
     */
    public static function fromCode(string $code): Region
    {
        foreach (static::cases() as $region) {
            if ($region->code() === $code) {
                return $region;
            }
        }

        throw EnumNotFoundException::codeNotFound($code, 'Region');
    }

    /**
     * Try to convert the given code to a Region, null if not valid
     *
     * @param string $code
     * @return Region|null
     */
    public static function tryFromCode(string $code): ?Region
    {
        try {
            return static::fromCode($code);
        } catch (EnumNotFoundException $e) {
            return null;
        }
    }

    /**
     * Get all region enums in an Illuminate\Support\Collection
     *
     * @requires Laravel
     * @return \Ilumminate\Support\Collection<Region>
     */
    public static function collect(): Collection
    {
        if (!class_exists(Collection::class)) {
            throw LaravelNotFoundException::classMissing(Collection::class);
        }

        return Collection::make(static::cases());
    }

    /**
     * Get the validation for this enum
     *
     * @return \Illuminate\Validation\Rules\Enum
     */
    public static function enumRule(): Enum
    {
        if (!class_exists(Enum::class)) {
            throw LaravelNotFoundException::classMissing(Enum::class);
        }

        return new Enum(static::class);
    }

    /**
     * Get the validation for the enum's values
     *
     * @return \Illuminate\Validation\Rules\In
     */
    public static function inRule(string|Country|null $country = null): In
    {
        if (!class_exists(In::class)) {
            throw LaravelNotFoundException::classMissing(In::class);
        }

        return new In(static::getValues($country));
    }

    /**
     * Parse the given region to a Region enum instance, or throw an exception it doesn't exist
     *
     * @param string|Region|null $value
     * @return Region
     * @throws EnumNotFoundException
     */
    public static function parse(string|Region|null $value): Region
    {
        if ($value === null) {
            throw EnumNotFoundException::valueNotFound($value, 'Region');;
        }

        if ($value instanceof Region) {
            return $value;
        }

        try {
            return static::from($value);
        } catch (ValueError $e) {
            throw EnumNotFoundException::valueNotFound($value, 'Region');
        }
    }

    /**
     * Try to parse the given region value to a Region enum instance of null if it doesn't exist
     *
     * @param string|Region|null $value
     * @return Region|null
     */
    public static function tryParse(string|Region|null $value): ?Region
    {
        try {
            return static::parse($value);
        } catch (EnumNotFoundException $e) {
            return null;
        }
    }

    /**
     * Convert this to JSON
     *
     * @param int $options Flags for json_encode, e.g. JSON_PRETTY_PRINT
     * @return string
     */
    public function toJson($options = 0): string
    {
        return json_encode($this->toArray(), $options);
    }

    /**
     * Get the human-readable label of this region without country prefix
     *
     * @return string
     */
    public function label(): string
    {
        return match ($this) {
            static::PLACEHOLDER_SHORT => "PLACEHOLDER_LABEL",
        };
    }

    /**
     * Get the code key (English-version snake_case) for this Region
     *
     * @return string
     */
    public function code(): string
    {
        return match ($this) {
            static::PLACEHOLDER_SHORT => "PLACEHOLDER_CODE",
        };
    }
}