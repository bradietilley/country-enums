<?php

namespace CountryEnums;

use InvalidArgumentException;

enum Region: string
{
    case {SHORT}{PAD} = '{SHORT}';{PAD} // {COUNTRY} > {LABEL}

    /**
     * Get the country that this region belongs to
     *
     * @return Country
     */
    public function country(): Country
    {
        return Country::from($this->countryCode());
    }

    /**
     * Cast this Region to array format
     *
     * @return array
     */
    public function toArray(): array
    {
        return [
            'label' => $this->label(),
            'value' => $this->value,
            'region' => $this->regionCode(),
            'country' => $this->countryCode(),
            'code' => $this->code(),
        ];
    }

    /**
     * Get the region code
     *
     * @return string
     */
    public function regionCode(): string
    {
        return substr($this->value, 3);
    }

    /**
     * Get the country code
     *
     * @return string
     */
    public function countryCode(): string
    {
        return substr($this->value, 0, 2);
    }

    /**
     * Get regions in the given country.
     *
     * @param string|Country $country
     * @return array<Region>
     */
    public static function for(string|Country $country): array
    {
        $country = ($country instanceof Country) ? $country : Country::from($country);
        
        return $country->regions();
    }

    /**
     * Get a random Region
     *
     * @return Region
     */
    public static function random(string|Country $country = null): Region
    {
        $cases = ($country !== null) ? static::for($country) : static::cases();

        return $cases[mt_rand(0, count($cases) - 1)];
    }

    /**
     * Get all available region codes (optionally scoped by country)
     *
     * @param string|Country|null $country
     * @return array
     */
    public static function getValues(string|Country $country = null): array
    {
        if ($country !== null) {
            $country = ($country instanceof Country) ? $country : Country::from($country);

            return $country->getRegionValues();
        }

        return array_map(fn(Region $region) => $region->value, static::cases());
    }

    /**
     * Get all options in key-value (code => label) pairs
     *
     * @return array
     */
    public static function getOptions(string|Country $country = null): array
    {
        $options = [];
        
        if ($country !== null) {
            $country = ($country instanceof Country) ? $country : Country::from($country);

            $cases = $country->regions();
        } else {
            $cases = static::cases();
        } 

        foreach ($cases as $region) {
            $options[$region->value] = $region->label();
        }

        return $options;
    }

    /**
     * Convert the given code to a Region, or throw an exception
     *
     * @param string $code
     * @return Region
     * @throws InvalidArgumentException
     */
    public static function fromCode(string $code): Region
    {
        foreach (static::cases() as $region) {
            if ($region->code() === $code) {
                return $region;
            }
        }

        throw new InvalidArgumentException('Invalid Region Enum code');
    }

    /**
     * Try to convert the given code to a Region, null if not valid
     *
     * @param string $code
     * @return Region|null
     */
    public static function tryFromCode(string $code): ?Region
    {
        try {
            return static::fromCode($code);
        } catch (InvalidArgumentException $e) {
            return null;
        }
    }

    /**
     * Get the human-readable label of this region without country prefix
     *
     * @return string
     */
    public function label(): string
    {
        return match ($this) {
            static::{SHORT} => "{LABEL}",
        };
    }

    /**
     * Get the code key (English-version snake_case) for this Region
     *
     * @return string
     */
    public function code(): string
    {
        return match ($this) {
            static::{SHORT} => "{CODE}",
        };
    }
}